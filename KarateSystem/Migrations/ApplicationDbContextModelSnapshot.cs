// <auto-generated />
using System;
using KarateSystem.Configurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KarateSystem.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KarateSystem.Models.CatKataDegree", b =>
                {
                    b.Property<int>("CatKataDegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatKataDegreeId"));

                    b.Property<int>("DegreeId")
                        .HasColumnType("int");

                    b.Property<int>("KataCatId")
                        .HasColumnType("int");

                    b.HasKey("CatKataDegreeId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("KataCatId");

                    b.ToTable("CatKataDegrees");
                });

            modelBuilder.Entity("KarateSystem.Models.Club", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClubId"));

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClubPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClubId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("KarateSystem.Models.Competitor", b =>
                {
                    b.Property<int>("CompId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompId"));

                    b.Property<int>("CompClubId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CompDateOfBirth")
                        .HasColumnType("date");

                    b.Property<int>("CompDegreeId")
                        .HasColumnType("int");

                    b.Property<string>("CompFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CompGender")
                        .HasColumnType("bit");

                    b.Property<string>("CompLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CompWeight")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("CompId");

                    b.HasIndex("CompClubId");

                    b.HasIndex("CompDegreeId");

                    b.ToTable("Competitors");
                });

            modelBuilder.Entity("KarateSystem.Models.Degree", b =>
                {
                    b.Property<int>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DegreeId"));

                    b.Property<string>("DegreeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DegreeId");

                    b.ToTable("Degrees");
                });

            modelBuilder.Entity("KarateSystem.Models.Fight", b =>
                {
                    b.Property<int>("FightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FightId"));

                    b.Property<int?>("FightNumOverTime")
                        .HasColumnType("int");

                    b.Property<decimal?>("FightScoreA")
                        .HasColumnType("decimal(5,1)");

                    b.Property<decimal?>("FightScoreB")
                        .HasColumnType("decimal(5,1)");

                    b.Property<int?>("FightTime")
                        .HasColumnType("int");

                    b.Property<int?>("FightWinner")
                        .HasColumnType("int");

                    b.HasKey("FightId");

                    b.ToTable("Fights");
                });

            modelBuilder.Entity("KarateSystem.Models.Kata", b =>
                {
                    b.Property<int>("KataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KataId"));

                    b.Property<decimal?>("KataRate1")
                        .HasColumnType("decimal(5,1)");

                    b.Property<decimal?>("KataRate2")
                        .HasColumnType("decimal(5,1)");

                    b.Property<decimal?>("KataRate3")
                        .HasColumnType("decimal(5,1)");

                    b.Property<decimal?>("KataRate4")
                        .HasColumnType("decimal(5,1)");

                    b.Property<decimal?>("KataRate5")
                        .HasColumnType("decimal(5,1)");

                    b.Property<decimal?>("KataScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("Overtime")
                        .HasColumnType("int");

                    b.Property<int>("TourCompId")
                        .HasColumnType("int");

                    b.HasKey("KataId");

                    b.HasIndex("TourCompId")
                        .IsUnique();

                    b.ToTable("Katas");
                });

            modelBuilder.Entity("KarateSystem.Models.KataCategory", b =>
                {
                    b.Property<int>("KataCatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KataCatId"));

                    b.Property<int>("KataCatAgeMax")
                        .HasColumnType("int");

                    b.Property<int>("KataCatAgeMin")
                        .HasColumnType("int");

                    b.Property<bool?>("KataCatGender")
                        .HasColumnType("bit");

                    b.Property<string>("KataCatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KataCatId");

                    b.ToTable("KataCategories");
                });

            modelBuilder.Entity("KarateSystem.Models.KumiteCategory", b =>
                {
                    b.Property<int>("KumiteCatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KumiteCatId"));

                    b.Property<int>("KumiteCatAgeMax")
                        .HasColumnType("int");

                    b.Property<int>("KumiteCatAgeMin")
                        .HasColumnType("int");

                    b.Property<bool>("KumiteCatGender")
                        .HasColumnType("bit");

                    b.Property<string>("KumiteCatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("KumiteCatWeightMax")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("KumiteCatWeightMin")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("KumiteCatId");

                    b.ToTable("KumiteCategories");
                });

            modelBuilder.Entity("KarateSystem.Models.Mat", b =>
                {
                    b.Property<int>("MatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatId"));

                    b.Property<string>("MatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatId");

                    b.ToTable("Mats");
                });

            modelBuilder.Entity("KarateSystem.Models.TourCatKata", b =>
                {
                    b.Property<int>("TourCatKataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourCatKataId"));

                    b.Property<int>("KataCatId")
                        .HasColumnType("int");

                    b.Property<int>("MatId")
                        .HasColumnType("int");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("TourCatKataId");

                    b.HasIndex("KataCatId");

                    b.HasIndex("MatId");

                    b.HasIndex("TourId");

                    b.ToTable("TourCatKatas");
                });

            modelBuilder.Entity("KarateSystem.Models.TourCatKumite", b =>
                {
                    b.Property<int>("TourCatKumiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourCatKumiteId"));

                    b.Property<int>("KumiteCatId")
                        .HasColumnType("int");

                    b.Property<int>("MatId")
                        .HasColumnType("int");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("TourCatKumiteId");

                    b.HasIndex("KumiteCatId");

                    b.HasIndex("MatId");

                    b.HasIndex("TourId");

                    b.ToTable("TourCatKumites");
                });

            modelBuilder.Entity("KarateSystem.Models.TourCompetitor", b =>
                {
                    b.Property<int>("TourCompId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourCompId"));

                    b.Property<int>("CompId")
                        .HasColumnType("int");

                    b.Property<int?>("TourCatKataId")
                        .HasColumnType("int");

                    b.Property<int?>("TourCatKumiteId")
                        .HasColumnType("int");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.HasKey("TourCompId");

                    b.HasIndex("CompId");

                    b.HasIndex("TourCatKataId");

                    b.HasIndex("TourCatKumiteId");

                    b.HasIndex("TourId");

                    b.ToTable("TourCompetitors");
                });

            modelBuilder.Entity("KarateSystem.Models.Tournament", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourId"));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TourDate")
                        .HasColumnType("date");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TourPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TourId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("KarateSystem.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KarateSystem.Models.CatKataDegree", b =>
                {
                    b.HasOne("KarateSystem.Models.Degree", "Degree")
                        .WithMany("CatKataDegrees")
                        .HasForeignKey("DegreeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KarateSystem.Models.KataCategory", "KataCategory")
                        .WithMany("CatKataDegrees")
                        .HasForeignKey("KataCatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Degree");

                    b.Navigation("KataCategory");
                });

            modelBuilder.Entity("KarateSystem.Models.Competitor", b =>
                {
                    b.HasOne("KarateSystem.Models.Club", "Club")
                        .WithMany("Competitors")
                        .HasForeignKey("CompClubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KarateSystem.Models.Degree", "Degree")
                        .WithMany("Competitors")
                        .HasForeignKey("CompDegreeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Degree");
                });

            modelBuilder.Entity("KarateSystem.Models.Kata", b =>
                {
                    b.HasOne("KarateSystem.Models.TourCompetitor", "TourCompetitor")
                        .WithOne("Kata")
                        .HasForeignKey("KarateSystem.Models.Kata", "TourCompId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TourCompetitor");
                });

            modelBuilder.Entity("KarateSystem.Models.TourCatKata", b =>
                {
                    b.HasOne("KarateSystem.Models.KataCategory", "KataCategory")
                        .WithMany("TourCatKatas")
                        .HasForeignKey("KataCatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KarateSystem.Models.Mat", "Mat")
                        .WithMany("TourCatKatas")
                        .HasForeignKey("MatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KarateSystem.Models.Tournament", "Tour")
                        .WithMany("TourCatKatas")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("KataCategory");

                    b.Navigation("Mat");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("KarateSystem.Models.TourCatKumite", b =>
                {
                    b.HasOne("KarateSystem.Models.KumiteCategory", "KumiteCategory")
                        .WithMany("TourCatKumites")
                        .HasForeignKey("KumiteCatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KarateSystem.Models.Mat", "Mat")
                        .WithMany("TourCatKumites")
                        .HasForeignKey("MatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KarateSystem.Models.Tournament", "Tour")
                        .WithMany("TourCatKumites")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("KumiteCategory");

                    b.Navigation("Mat");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("KarateSystem.Models.TourCompetitor", b =>
                {
                    b.HasOne("KarateSystem.Models.Competitor", "Competitor")
                        .WithMany("TourCompetitors")
                        .HasForeignKey("CompId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KarateSystem.Models.TourCatKata", "TourCatKata")
                        .WithMany("TourCompetitors")
                        .HasForeignKey("TourCatKataId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KarateSystem.Models.TourCatKumite", "TourCatKumite")
                        .WithMany("TourCompetitors")
                        .HasForeignKey("TourCatKumiteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KarateSystem.Models.Tournament", "Tournament")
                        .WithMany("TourCompetitors")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competitor");

                    b.Navigation("TourCatKata");

                    b.Navigation("TourCatKumite");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("KarateSystem.Models.Club", b =>
                {
                    b.Navigation("Competitors");
                });

            modelBuilder.Entity("KarateSystem.Models.Competitor", b =>
                {
                    b.Navigation("TourCompetitors");
                });

            modelBuilder.Entity("KarateSystem.Models.Degree", b =>
                {
                    b.Navigation("CatKataDegrees");

                    b.Navigation("Competitors");
                });

            modelBuilder.Entity("KarateSystem.Models.KataCategory", b =>
                {
                    b.Navigation("CatKataDegrees");

                    b.Navigation("TourCatKatas");
                });

            modelBuilder.Entity("KarateSystem.Models.KumiteCategory", b =>
                {
                    b.Navigation("TourCatKumites");
                });

            modelBuilder.Entity("KarateSystem.Models.Mat", b =>
                {
                    b.Navigation("TourCatKatas");

                    b.Navigation("TourCatKumites");
                });

            modelBuilder.Entity("KarateSystem.Models.TourCatKata", b =>
                {
                    b.Navigation("TourCompetitors");
                });

            modelBuilder.Entity("KarateSystem.Models.TourCatKumite", b =>
                {
                    b.Navigation("TourCompetitors");
                });

            modelBuilder.Entity("KarateSystem.Models.TourCompetitor", b =>
                {
                    b.Navigation("Kata");
                });

            modelBuilder.Entity("KarateSystem.Models.Tournament", b =>
                {
                    b.Navigation("TourCatKatas");

                    b.Navigation("TourCatKumites");

                    b.Navigation("TourCompetitors");
                });
#pragma warning restore 612, 618
        }
    }
}
